// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com package client;import common.*;import java.io.*;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.client.ObservableClient;/** * This class overrides some of the methods defined in the abstract * superclass in order to give more functionality to the client. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave; * @author Fran&ccedil;ois B&eacute;langer * @version July 2000 */public class ChatClient implements Observer{  //Instance variables **********************************************    /**   * The interface type variable.  It allows the implementation of    * the display method in the client.   */  ChatIF clientUI;   String ID;  ObservableClient client;    //Constructors ****************************************************    /**   * Constructs an instance of the chat client.   *   * @param host The server to connect to.   * @param port The port number to connect on.   * @param clientUI The interface type variable.   */    public ChatClient(String host, int port, ChatIF clientUI)     throws IOException   {       this.clientUI = clientUI;    this.client=new ObservableClient(host, port);    this.client.addObserver(this);         }    //Instance methods ************************************************      /**   * This method handles all data that comes in from the server.   *   * @param msg The message from the server.   */  public void handleMessageFromServer(Object msg)   {    clientUI.display(msg.toString());  }  /**   * This method handles all data coming from the UI               *   * @param message The message from the UI.       */  public void handleMessageFromClientUI(String message)  {    try    {    	client.sendToServer(message);    }    catch(IOException e)    {      clientUI.display        ("Could not send message to server.  Terminating client.");      quit();    }  }    /*  @Override  protected void connectionException(Exception exception) {	  clientUI.display      ("Server Crash");	  System.exit(0);  }*/  public void handleCommandFromClientUI(String command) {	  	  switch(command.split(" ")[0]) {	  case "quit":		  quit();		  break;	  case "logoff":		  try {			  client.closeConnection();		} catch (IOException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		  break;	  case "sethost":		  if(!client.isConnected()) {			  client.setHost(command.split(" ")[1]);		  }break;	  case "setport":		  if(!client.isConnected()) {			  client.setPort(Integer.parseInt(command.split(" ")[1]));		  }break;	  case "login":		  if(!client.isConnected()) {			  try {				  client.openConnection();				this.ID=command.split(" ")[1];				this.handleMessageFromClientUI("#login "+command.split(" ")[1]);			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		  }else {			  System.out.println("Déjà connecté");		  }		  break;	  case "gethost":		  System.out.println("Host "+client.getHost());		  break;	  case "getport":		  System.out.println("Host "+client.getPort());		  break;	  default:			  System.out.println("La commande n'est pas reconnu");			  break;		  		  }  }  /**   * This method terminates the client.   */    public void quit()  {    try    {    	client.closeConnection();    }    catch(IOException e) {}    System.exit(0);  }	@Override	public void update(Observable arg0, Object arg1) {		// TODO Auto-generated method stub		if(arg1 instanceof Exception) {			clientUI.display		      ("Server Crash");			  System.exit(0);					}else {			clientUI.display(arg1.toString());		}							}}//End of ChatClient class