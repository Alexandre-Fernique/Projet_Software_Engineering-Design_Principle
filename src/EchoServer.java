// This file contains material supporting section 3.7 of the textbook:// "Object Oriented Software Engineering" and is issued under the open-source// license found at www.lloseng.com import java.io.*;import java.util.Observable;import java.util.Observer;import com.lloseng.ocsf.server.ConnectionToClient;import com.lloseng.ocsf.server.ObservableOriginatorServer;import com.lloseng.ocsf.server.ObservableServer;import com.lloseng.ocsf.server.OriginatorMessage;import ocsf.server.*;/** * This class overrides some of the methods in the abstract  * superclass in order to give more functionality to the server. * * @author Dr Timothy C. Lethbridge * @author Dr Robert Lagani&egrave;re * @author Fran&ccedil;ois B&eacute;langer * @author Paul Holden * @version July 2000 */public class EchoServer implements Observer {  //Class variables *************************************************    /**   * The default port to listen on.   */  final public static int DEFAULT_PORT = 5555;  ObservableOriginatorServer obs;    //Constructors ****************************************************    /**   * Constructs an instance of the echo server.   *   * @param port The port number to connect on.   */  public EchoServer(int port)   {    obs = new ObservableOriginatorServer(port);    obs.addObserver(this);  }    //Instance methods ************************************************    /**   * This method handles any messages received from the client.   *   * @param msg The message received from the client.   * @param client The connection from which the message originated.   */  public void handleMessageFromClient    (Object msg, ConnectionToClient client)  {	  if(client.getInfo("ID")==null) {		  if(msg.toString().startsWith("#login ")) {			  client.setInfo("ID", msg.toString().substring(7));		  }else {			  try {				client.sendToClient("Pas de ID enregistrer");				client.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		  }	  }else {		  System.out.println("Message received: " + msg + " from " + client.getInfo("ID"));		  obs.sendToAllClients(client.getInfo("ID")+"> "+msg.toString());	  }      }      /**   * This method overrides the one in the superclass.  Called   * when the server starts listening for connections.   */  protected void serverStarted()  {    System.out.println      ("Server listening for connections on port " + obs.getPort());  }    /**   * This method overrides the one in the superclass.  Called   * when the server stops listening for connections.   */  protected void serverStopped()  {    System.out.println      ("Server has stopped listening for connections.");  }  protected void clientConnected(ConnectionToClient client) {	  System.out.println(client+" is connected");  }  synchronized protected void clientDisconnected(		    ConnectionToClient client) {	  if(client.getInetAddress()==null) {		  System.out.println("Someone is disconnected");	  }else {		  System.out.println(client.getInetAddress()+" is disconnected");	  }	  	    }  synchronized protected void clientException(		    ConnectionToClient client, Throwable exception) {	  if(client.getInfo("ID")==null) {		  System.out.println("Someone is disconnected");	  }else {		  System.out.println(client.getInfo("ID")+" is disconnected");	  }  }    public void handleMessageFromServer() {	  try	    {	      BufferedReader fromConsole = 	        new BufferedReader(new InputStreamReader(System.in));	      String message;	      while (true) 	      {	    	  	        message ="SERVER MSG> "+ fromConsole.readLine();	        if(message.charAt(12)=='#') {	        	this.handleCommandFromServerUI(message.substring(13));	        		        }else {	        	obs.sendToAllClients(message);	        }	        	        	      }	    }	  catch (Exception ex) 	  {		  System.out.println	        ("Unexpected error while reading from console!");		  	  }  }  public void listen() {	  try {		this.obs.listen();	} catch (IOException e) {		// TODO Auto-generated catch block		e.printStackTrace();	}  }  public void handleCommandFromServerUI(String command) {	  switch(command.split(" ")[0]) {	  case "quit":		  try {			obs.close();		} catch (IOException e1) {			// TODO Auto-generated catch block			e1.printStackTrace();		}		  System.exit(0);		  break;	  case "stop":		  if(obs.isListening()) {			  obs.stopListening(); 		  }		  break;	  case "close":		  if(obs.isListening()) {			  try {				  obs.close();			} catch (IOException e) {				// TODO Auto-generated catch block				e.printStackTrace();			}		  }break;	  case "setport":		  if(!obs.isListening()) {			  obs.setPort(Integer.parseInt(command.split(" ")[1]));		  }else {			  System.out.println("Déjà ouvert");		  }break;	  case "start":		  if(!obs.isListening()) {			  listen();		  }else {			  System.out.println("Déjà connecté");		  }		  break;	  case "getport":		  System.out.println("Port> "+obs.getPort());		  break;	  default:			  System.out.println("La commande n'est pas reconnu");			  break;		  		  }  }	 	        //Class methods ***************************************************    /**   * This method is responsible for the creation of    * the server instance (there is no UI in this phase).   *   * @param args[0] The port number to listen on.  Defaults to 5555    *          if no argument is entered.   */  public static void main(String[] args)   {    int port = 0; //Port to listen on    try    {      port = Integer.parseInt(args[0]); //Get port from command line    }    catch(Throwable t)    {      port = DEFAULT_PORT; //Set port to 5555    }	    EchoServer sv = new EchoServer(port);        try     {      sv.listen(); //Start listening for connections      sv.handleMessageFromServer();    }     catch (Exception ex)     {      System.out.println("ERROR - Could not listen for clients!");    }  }	@Override	public void update(Observable arg0, Object arg1) {		OriginatorMessage cm=(OriginatorMessage)arg1;				if(cm.getMessage().toString()=="#OS:Client connected.") {					}		else if(cm.getMessage().toString()=="#OS:Client disconnected.") {									}		else if(cm.getMessage().toString()=="#OS:Server closed.") {					}		else if(cm.getMessage().toString()=="#OS:Server started.") {									}		else if(cm.getMessage().toString()=="#OS:Server stopped.") {					}		else if(cm.getMessage().toString().startsWith("#OS:Client exception.")) {			this.clientException(cm.getOriginator(), new Exception(cm.getMessage().toString().substring(22)));									}		else if(cm.getMessage().toString().startsWith("#OS:Listening exception.")) {					}		else {			this.handleMessageFromClient(cm.getMessage(), cm.getOriginator());		}							}}//End of EchoServer class